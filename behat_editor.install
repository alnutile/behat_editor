<?php

/**
 * Implements hook_requirements().
 *
 * Make sure libraries are installed
 */
function behat_editor_requirements($phase) {
    $requirements = array();
    $t = get_t();
    if ($phase == 'install') {

        if(!module_exists('behat_lib')) {
            $modules = array('behat_lib');
            module_enable($modules);
        }

        $libs = behat_lib_libraries_info();
        foreach ($libs as $lib=>$parms){
            $library = libraries_detect($lib);
            $requirements[$lib] = array( 'title' => $t($parms['name']),);
            if ($library['installed']) {
                $requirements[$lib]['description'] = '';
                $requirements[$lib]['value'] = '> 0';
                $requirements[$lib]['severity'] = REQUIREMENT_OK;
            } else {
                $requirements[$lib]['value'] = $t('Required Library missing @lib',array('@lib'=>$lib));
                $requirements[$lib]['description'] =  $t('You must download @lib. ',array('@lib'=>$parms['name'])).
                    l($t('Go to download link'), $parms['download url']).'.<br />'.
                    t('<b>Also you can install @lib with drush typing "drush bl"</b><br>', array('@lib'=>$lib));
                $requirements[$lib]['severity'] = REQUIREMENT_ERROR;
                $requirements[$lib]['value'] = 'Not installed';
            }
        }

        $path = 'public://behat_tests/'; // from ctools install
        if (!file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
            $requirements['behat_editor']['description'] = t('The test folder for this module could not be made %path', array('%path' => file_uri_target($path)));
            $requirements['behat_editor']['severity'] = REQUIREMENT_ERROR;
            $requirements['behat_editor']['value'] = t('Unable to create');
        } else {
            drupal_chmod($path, $mode = 0777); // in case drush makes it I want www-data to write to this
        }
        $path = 'public://behat_tests/results'; // from ctools install
        if (!file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
            $requirements['behat_editor']['description'] = t('The test folder for this module could not be made %path', array('%path' => file_uri_target($path)));
            $requirements['behat_editor']['severity'] = REQUIREMENT_ERROR;
            $requirements['behat_editor']['value'] = t('Unable to create');
        } else {
            drupal_chmod($path, $mode = 0777); // in case drush makes it I want www-data to write to this
        }
    }
    return $requirements;
}

function behat_editor_enable(){
    $tables = behat_editor_schema();
    foreach($tables as $key => $value) {
        if(!db_table_exists($key)) {
            db_create_table($key, $value);
        }
    }

    $modules = array('behat_editor_services');
    module_enable($modules);
    $jquery = variable_get('jquery_update_jquery_version', 0);
    if(!$jquery || $jquery < 1.7) {
        variable_set('jquery_update_jquery_version', '1.7');
    }
}


/**
 * Version 2 of the CTools schema.
 */
function behat_editor_schema() {

    $schema['behat_editor_results'] = array(
        'description' => 'Save test results for later reference.',
        'fields' => array(
            'rid' => array(
                'type' => 'serial',
                'description' => 'Result ID',
                'not null' => TRUE,
            ),
            'filename' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => TRUE,
                'default' => '',
                'description' => 'The File name of test',
            ),
            'module' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => TRUE,
                'default' => '',
                'description' => 'The module of this file',
            ),
            'results' => array(
                'type' => 'blob',
                'size' => 'normal',
                'description' => 'Serialize results',
                'serialize' => TRUE,
            ),
            'duration' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => TRUE,
                'default' => '',
                'description' => 'Duration output of behat',
            ),
            'created' => array(
                'type' => 'int',
                'not null' => FALSE,
                'description' => 'Test created at as Unix timestamp.',
            ),
            'status' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => '0 for pass 1 for fail',
            ),
            'uid' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'User who ran the test',
            )
        ),
        'primary key' => array('rid'),
    );

    $schema['behat_editor_batch_results'] = array(
        'description' => 'Save Test Results for Batch Runs',
        'fields' => array(
            'rid' => array(
                'type' => 'serial',
                'description' => 'Auot ID',
                'not null' => TRUE,
            ),
            'bid' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => FALSE,
                'default' => '0',
                'description' => 'Batch ID for later reference',
            ),
            'jid' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => FALSE,
                'default' => '0',
                'description' => 'Job ID if related to outside process',
            ),
            'uid' => array(
                'type' => 'int',
                'not null' => FALSE,
                'default' => 0,
                'description' => 'User who ran the tests',
            ),
            'created' => array(
                'type' => 'int',
                'not null' => FALSE,
                'description' => 'Test created at as Unix timestamp.',
            ),
            'type' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => TRUE,
                'default' => '',
                'description' => 'background non_background',
            ),
            'method' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => FALSE,
                'default' => NULL,
                'description' => 'Module, Tag or other',
            ),
            'operations' => array(
                'type' => 'blob',
                'size' => 'normal',
                'description' => 'Passed operations',
                'serialize' => TRUE,
            ),
            'repo' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => FALSE,
                'default' => NULL,
                'description' => 'Can be triggered by a repo as well',
            ),
            'results' => array(
                'type' => 'blob',
                'size' => 'normal',
                'description' => 'Serialize results from the test output',
                'serialize' => TRUE,
            ),
            'batch_status' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'Is batch job running still 1 = yes 2 = done 0 = pending. e.g test_count == results_count',
            ),
            'test_count' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'How many tests are there.',
            ),
            'count_at' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'What test are we running',
            ),
            'results_count' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'How many tests have returned results.',
            ),
            'status' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 3,
                'description' => '0 for pass 1 for fail 3 for no results yet',
            )
        ),
        'primary key' => array('rid'),
    );
    $schema['behat_editor_base_url_settings'] = array(
        'description' => 'Settings for Base URL',
        'fields' => array(
            'sid' => array(
                'type' => 'serial',
                'description' => 'Settings ID',
                'not null' => TRUE,
            ),
            'uid' => array(
                'type' => 'int',
                'not null' => TRUE,
                'description' => 'User who made settings',
            ),
            'gid' => array(
                'type' => 'int',
                'not null' => FALSE,
                'default' => 0,
                'description' => 'Group the user made settings for',
            ),
            'nice_name' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => FALSE,
                'default' => NULL,
                'description' => 'Nice Name of the URL',
            ),
            'base_url' => array(
                'type' => 'varchar',
                'length' => '255',
                'not null' => FALSE,
                'default' => NULL,
                'description' => 'Base url can include AUTH eg http://admin:password@google.com',
            ),
            'default_url' => array(
                'type' => 'int',
                'not null' => FALSE,
                'default' => 0,
                'description' => 'Is default Base URL',
            ),
            'active' => array(
                'type' => 'int',
                'not null' => FALSE,
                'default' => 1,
                'description' => 'Is Active',
            ),
        ),
        'primary key' => array('sid'),
    );

    return $schema;
}

/**
 * Add db to track test results
 */
function behat_editor_update_7001() {
    if(!db_table_exists('behat_editor_results')) {
        $name = 'behat_editor_results';
        $schema = behat_editor_schema();
        $table = $schema[$name];
        db_create_table($name, $table);
    }
}


/**
 * Add status field for pass fail results to BehatEditorResults table
 */
function behat_editor_update_7002() {
    if (!db_field_exists('behat_editor_results', 'status')) {
        db_add_field('behat_editor_results', 'status', array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => '0 for pass 1 for fail',
            )
        );
    }
}

/**
 * Add db to track test results for batch API
 */
function behat_editor_update_7003() {
    if(!db_table_exists('behat_editor_batch_results')) {
        $name = 'behat_editor_batch_results';
        $schema = behat_editor_schema();
        $table = $schema[$name];
        db_create_table($name, $table);
    }
}

/**
 *
 */
function behat_editor_update_7004() {

}

/**
 * Add db to track test results to batch status
 */
function behat_editor_update_7005() {
    if (!db_field_exists('behat_editor_batch_results', 'batch_status')) {
        db_add_field('behat_editor_batch_results', 'batch_status', array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'Is batch job running still 0 yes 1 done',
            )
        );
    }
}

/**
 * Add to the table some rows to better track test progress
 */
function behat_editor_update_7006() {
    $fields = array('results_count', 'count_at', 'test_count', 'repo');
    $schema = behat_editor_schema();
    $table = $schema['behat_editor_batch_results'];
    foreach($fields as $field) {
        if (!db_field_exists('behat_editor_batch_results', $field)) {
            db_add_field('behat_editor_batch_results', $field, $table['fields'][$field]);
        }
    }
}


/**
 * Add some needed fields
 */
function behat_editor_update_7007() {
    $fields = array('operations', 'method');
    $schema = behat_editor_schema();
    $table = $schema['behat_editor_batch_results'];
    foreach($fields as $field) {
        if (!db_field_exists('behat_editor_batch_results', $field)) {
            db_add_field('behat_editor_batch_results', $field, $table['fields'][$field]);
        }
    }
}

/**
 * Remove some fields
 */
function behat_editor_update_7008() {
    $fields = array('module', 'folder', 'subfolder', 'tag');
    foreach($fields as $field) {
        if (db_field_exists('behat_editor_batch_results', $field)) {
            db_drop_field('behat_editor_batch_results', $field);
        }
    }
}

/**
 * Rename field to make it more clear
 */
function behat_editor_update_7009() {
        $schema = behat_editor_schema();
        $field = $schema['behat_editor_batch_results']['fields']['status'];
        if (db_field_exists('behat_editor_batch_results', 'status')) {
            db_change_field('behat_editor_batch_results', 'status', 'pass_fail', $field);
        }
}

/**
 * Rename field to make it more clear
 */
function behat_editor_update_7010() {
    $schema = behat_editor_schema();
    $field = $schema['behat_editor_batch_results']['fields']['type'];
    if (db_field_exists('behat_editor_batch_results', 'duration')) {
        db_change_field('behat_editor_batch_results', 'duration', 'type', $field);
    }
}


/**
 * Add user uid field
 */
function behat_editor_update_7011() {
    if (!db_field_exists('behat_editor_results', 'uid')) {
        $schema = behat_editor_schema();
        $field = $schema['behat_editor_results']['fields']['uid'];
        db_add_field('behat_editor_results', 'uid', $field);
    }
}


/**
 * clear up null
 */
/**
 * Add user uid field and clear up null
 */
function behat_editor_update_7012() {

}


/**
 * clear up null
 */
/**
 * Add user uid field and clear up null
 */
function behat_editor_update_7013() {

}


/**
 * clear up null
 */
/**
 * Add user uid field and clear up null
 */
function behat_editor_update_7014() {

}



/**
 * clear up null
 */
/**
 * Add user uid field and clear up null
 */
function behat_editor_update_7015() {
    db_update('behat_editor_results')
        ->fields(array('uid' => '0'))
        ->condition('uid', '', '=')
        ->execute();
}

/**
 * Add Settings Table
 */
function behat_editor_update_7016() {
    if(!db_table_exists('behat_editor_base_url_settings')) {
        $name = 'behat_editor_base_url_settings';
        $schema = behat_editor_schema();
        $table = $schema[$name];
        db_create_table($name, $table);
    }
}

/**
 * Add nice name field to settings
 */
function behat_editor_update_7017() {
    if (!db_field_exists('behat_editor_base_url_settings', 'nice_name')) {
        $schema = behat_editor_schema();
        $field = $schema['behat_editor_base_url_settings']['fields']['nice_name'];
        db_add_field('behat_editor_base_url_settings', 'nice_name', $field);
    }
}

/**
 * Rename field since default broke sql
 */
function behat_editor_update_7018() {

}


/**
 * Rename field since default broke sql
 */
function behat_editor_update_7019() {

}

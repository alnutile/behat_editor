<?php

use Drupal\BehatEditor;


//Default folder to store tests for modules
define('BEHAT_EDITOR_FOLDER', 'behat_features');
//Name of "tmp" module to help build the array of
//module with behat_features folders.
define('BEHAT_EDITOR_DEFAULT_FOLDER', 'behat_tests');
//The name of the folder that stores the non module based
//tests eg files/behat_tests
define('BEHAT_EDITOR_DEFAULT_STORAGE_FOLDER', 'behat_tests');

require_once 'behat_editor_services.resource.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function behat_editor_ctools_plugin_api() {
    list($module, $api) = func_get_args();
    if ($module == "services" && $api == "services") {
        return array("version" => "3");
    }
}

/**
 * Implements hook_permission().
 */
function behat_editor_permission() {
    $items['behat view test'] = array(
       'title' => t('View a test file'),
       'description' => t('Can view a singular test')
    );
    $items['behat view all tests'] = array(
        'title' => t('View all test file'),
        'description' => t('Can view all tests')
    );
    $items['behat add test'] = array(
        'title' => t('Add a test'),
        'description' => t('Can add a test')
    );
    $items['behat run test'] = array(
        'title' => t('Can run a test'),
        'description' => t('Can run a test')
    );
    $items['behat edit test'] = array(
        'title' => t('Can edit a test'),
        'description' => t('Can edit a test')
    );
    $items['behat delete test'] = array(
        'title' => t('Can delete a test'),
        'description' => t('Can delete a test')
    );
    $items['behat admin settings'] = array(
        'title' => t('Can Admin Settings'),
        'description' => t('Can Admin Settings')
    );
   return $items;
}

/**
 * Implements hook_menu().
 *
 * @todo use services for the run endpoint
 */
function behat_editor_menu() {
    $path = drupal_get_path('module', 'behat_editor');
    $items['admin/behat'] = array(
        'title' => 'Admin Behat Files',
        'page callback' => 'behat_editor_index',
        'access arguments' => array('behat view all tests'),
        'file' => 'behat-editor-index.inc',
        'file path' => "$path/tpl/",
        'description' => 'Behat Editor Index page',
    );

    $items['admin/behat/index'] = array(
        'title' => 'Admin Behat Files',
        'weight' => 1,
        'type' => MENU_DEFAULT_LOCAL_TASK
    );

    $items['admin/behat/view/%/%'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('behat_editor_view_form', 3,4),
        'access arguments' => array('behat view test'),
        'file' => 'behat_editor_view.inc',
        'file path' => "$path/tpl/",
        'type' => MENU_CALLBACK,
    );

    $items['admin/behat/add'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('behat_editor_add_form'),
        'access arguments' => array('behat add test'),
        'file' => 'behat_editor_add_form.inc',
        'file path' => "$path/tpl/",
        'type' => MENU_CALLBACK,
    );

    $items['admin/behat/edit/%/%'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('behat_editor_edit_form', 3, 4),
        'access arguments' => array('behat edit test'),
        'file' => 'behat-editor-edit.inc',
        'file path' => "$path/tpl/",
        'type' => MENU_CALLBACK,
    );

    $items['admin/behat/upload_test'] =  array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('behat_editor_file_uploader'),
        'access arguments' => array('behat add test'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/behat/delete_test'] =  array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('behat_editor_delete_test'),
        'access arguments' => array('behat delete test'),
        'file' => 'behat_editor_delete_test_form.inc',
        'file path' => "$path/includes/",
        'type' => MENU_CALLBACK,
    );

    $items['admin/behat/bulk'] =  array(
        'page callback' => 'behat_editor_bulk_tags',
        'title' => 'Batch Tests',
        'access arguments' => array('behat run test'),
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
        'weight' => 2,
        'file path' => "$path/includes/",
        'file' => 'behat_editor_tag.batch.inc',
    );

    $items['admin/behat/bulk/module'] =  array(
        'title' => 'Batch Tests by Module',
        'access arguments' => array('behat run test'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
        'page callback' => 'behat_editor_bulk',
        'file path' => "$path/includes/",
        'file' => 'behat_editor_module.batch.inc',
    );

    $items['admin/behat/bulk/tags'] =  array(
        'title' => 'Batch Tests by Tags',
        'access arguments' => array('behat run test'),
        'type' => MENU_DEFAULT_LOCAL_TASK ,
        'weight' => -5,
    );

    $items['admin/behat/settings'] =  array(
        'title' => 'Behat URL Settings',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
        'weight' => 10,
        'page callback' => 'behat_settings_base_url_user',
        'file path' => "$path/includes/",
        'file' => 'behat_settings_base_url_user.inc',
    );

    $items['admin/behat/settings/base_url/user'] =  array(
        'title' => 'Base URL Settings by User',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK ,
        'weight' => -5,
    );

    $items['admin/behat/settings/base_url/groups'] =  array(
        'title' => 'Behat URL Settings by Group',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
        'page callback' => 'behat_settings_base_url_group',
        'file path' => "$path/includes/",
        'file' => 'behat_settings_base_url_group.inc',
    );

    $items['admin/behat/settings/base_url/user/add'] =  array(
        'title' => 'Add User Level Behat Settings',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_CALLBACK,
        'weight' => 10,
        'page callback' => 'behat_editor_base_url_settings_user_add',
        'file path' => "$path/includes/",
        'file' => 'behat_settings_base_url_user.inc',
    );

    $items['admin/behat/settings/base_url/user/edit/%'] =  array(
        'title' => 'Add User Level Behat Settings',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_CALLBACK,
        'weight' => 10,
        'page callback' => 'behat_editor_base_url_settings_user_edit',
        'page arguments' => array(6),
        'file path' => "$path/includes/",
        'file' => 'behat_settings_base_url_user.inc',
    );

    $items['admin/behat/settings/base_url/group/add'] =  array(
        'title' => 'Add Group Level Behat Settings',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_CALLBACK,
        'weight' => 10,
        'page callback' => 'behat_editor_base_url_settings_group_add',
        'file path' => "$path/includes/",
        'file' => 'behat_settings_base_url_group.inc',
    );


    $items['admin/behat/settings/base_url/group/edit/%'] =  array(
        'title' => 'Add Group Level Behat Settings',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_CALLBACK,
        'weight' => 10,
        'page callback' => 'behat_editor_base_url_settings_group_edit',
        'page arguments' => array(6),
        'file path' => "$path/includes/",
        'file' => 'behat_settings_base_url_group.inc',
    );

    $items['admin/behat/report'] = array(
        'page callback' => 'behat_editor_report',
        'title' => 'Report',
        'access arguments' => array('behat view test'),
        'type' => MENU_CALLBACK,
        'weight' => 5,
        'file' => 'behat_editor_report_page.inc',
        'file path' => "$path/tpl/",
    );
    return $items;
}


/**
 * Could not figure out how to only do my validation on
 * this one form
 * @param $file
 */
function behat_editor_file_validate_custom($file) {
    $error = FALSE;
    $message = '';
    $filename = explode('.', $file->filename);
    if (preg_match('/[^a-z_\-0-9]/i', $filename[0])) {
        $error = 1;
        $message = "Only lowercase letters, underscores and numbers are allowed in the name";
    };
    return array('error' => $error, 'message' => $message);
}


function behat_editor_file_uploader() {

    $form['file_container'] = array(
        '#type' => 'fieldset',
        '#title' => t('Upload a test'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $form['file_container']['file'] = array(
        '#type' => 'file',
        '#title' => t("Upload an already written test"),
        '#description' => t('Filename must end in .feature. It must be written in properly formatted gherkin. The name can only contain alpha numeric characters'),
    );

    $form['file_container']['overwrite'] = array(
        '#type' => 'checkbox',
        '#title' => "Overwrite",
        '#description' => t('Overwrite file if it exists'),
        '#size' => 22,
    );

    $form['file_container']['submit'] = array(
        '#type' => 'submit',
        '#value' => t("Submit")
    );

    return $form;
}

function behat_editor_file_uploader_validate($form, &$form_state) {
    $file = file_save_upload(
        'file',
        $validators = array('file_validate_extensions' => array('feature')),
        $destination = "temporary://",
        $replace = FILE_EXISTS_REPLACE
    );

    if($file) {
        //Check machine name
        $machine_name = behat_editor_file_validate_custom($file);
        if($machine_name['error'] === 1) {
            form_set_error('file', $machine_name['message']);
        } else {
            $form_state['values']['file'] = $file;
        }
    }
}


function behat_editor_file_uploader_submit($form, &$form_state) {
    if($form_state['values']['file']) {
        $file = $form_state['values']['file'];
        if($form_state['values']['overwrite'] == 1) {
            $how = FILE_EXISTS_REPLACE;
        } else {
            $how = FILE_EXISTS_RENAME;
        }
        $file_copy = file_unmanaged_copy($file->uri, "public://" . BEHAT_EDITOR_DEFAULT_STORAGE_FOLDER, $how);
        $new_name = explode('/', $file_copy);
        drupal_set_message(t("Your file has been saved !click to edit it.", array('!click' => l($file->filename, 'admin/behat/edit/' . BEHAT_EDITOR_DEFAULT_STORAGE_FOLDER . '/' . array_pop($new_name)))), 'status');
    }
}


/**
 * Implements hook_theme().
 */
function behat_editor_theme() {
    $items['behat_editor_view'] = array(
        'variables' => array(
            'params' => NULL,
        ),
        'file' => 'tpl/behat_shared_views.inc'
    );
    $items['behat_editor_file_to_html_view'] = array(
        'variables' => array(
            'file_text' => NULL,
        ),
        'file' => 'tpl/behat_shared_views.inc'
    );
    $items['behat_editor_file_to_html_edit'] = array(
        'variables' => array(
            'file_text' => NULL,
        ),
        'file' => 'tpl/behat_shared_views.inc'
    );
    $items['behat_editor_results_area'] = array(
        'variables' => array(
            'params' => NULL
        ),
        'file' => 'tpl/behat_shared_views.inc',
        'template' => 'tpl/behat-editor-results-area'
    );
    $items['behat_editor_view_questions_area'] = array(
        'variables' => array(
            'actions' => NULL,
            'questions' => NULL
        ),
        'file' => 'tpl/behat_shared_views.inc',
        'template' => 'tpl/behat-editor-view-questions-area'
    );
    $items['behat_editor_questions_area_edit'] = array(
        'variables' => array(
            'params' => NULL
        ),
        'file' => 'tpl/behat_shared_views.inc',
        'template' => 'tpl/behat-editor-questions-area-edit'
    );
    $items['behat_editor_questions_area_intro'] = array(
        'variables' => array(),
        'file' => 'tpl/behat_shared_views.inc',
        'template' => 'tpl/behat-editor-questions-area-intro'
    );
    $items['behat_editor_item_list'] = array(
        'variables' => array(
            'items' => NULL,
            'attributes' => NULL,
        ),
        'file' => 'tpl/behat_shared_views.inc',
    );
    return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Centralize some shared code
 */
function behat_editor_form_alter(&$form, $form_state, $form_id) {
    $forms = array('behat_editor_view_form', 'behat_editor_edit_form', 'behat_editor_add_form');
    if(in_array($form_id, $forms)) {
        $vendor = composer_manager_vendor_dir();
        if(!file_exists($vendor)) {
            drupal_set_message(t("You do not have a vendor folder setup. Did you finish setting up Composer Manager?", 'error'));
        } elseif(!file_exists($vendor .'/behat/behat/bin/behat' )) {
            drupal_set_message(t('You do not have a behat loaded yet. Did you run !composer_install via the Composer Manager?',
                array('!composer_install' => l('composer install', 'admin/system/composer-manager'))), 'error');
        }
        drupal_set_message(t('!icon Any @javascript tag will not be run unless you are using a vendor like Saucelabs or a local selenium server', array('!icon' => '<i class="glyphicon glyphicon-comment glyphicon-white"></i>')), 'info');
    }
}

/**
 * Get a quick path to the behat/bin exec
 * in the vendor dir
 *
 * @return string
 */
function _behat_editor_behat_bin_folder() {
    return composer_manager_vendor_dir() . '/behat/behat/';
}

/**
 * Implements hook_help().
 */
function behat_editor_help($path, $arg) {
    $output = NULL;

    switch ($path) {
        case 'admin/help#behat_editor':
            $output = '<p>' . t('Visit the <a href="@handbook_url">Behat Editor Handbook</a> for help and information.', array('@handbook_url' => 'http://comingsoon.com')) . '</p>';
            break;
        case 'admin/behat/index':
            $output = '<p>' . t('Below are all the feature files found in behat_features folders of all enabled modules') . '</p>';
            $output .= '<p>' . t('From here you can View and Run a test. Or Add a new test.') . '</p>';
            break;
        case 'admin/behat/view/%/%':
            $output = '<p>' . t('You are viewing a file. You can edit or run a test as needed') . '</p>';
            break;
        case 'admin/behat/add':
            $output = '<p>' . t('This will create a new test file. As you make it feel free to Run a test.') . '</p>';
            break;
        case 'admin/behat/edit':
            $output = '<p>' . t('You are editing a file on the system. As you Run or click Save your test will be written back to the file.') . '</p>';
            break;
    }
    return $output;
}


/**
 * Make link to file but
 * Protect Private file output
 * if file marked private_
 *
 * @param $file_name
 * @param $module_name
 * @return string
 */
function _show_file_link($file_name, $module_name, $link) {
    if(strpos($file_name, 'private_') === FALSE ) {
        $results = l($file_name, 'admin/behat/view' . $link);
    } else {
        $results = $file_name;
    }
    return $results;
}


/**
 * Protect module name if
 * Private
 *
 * @param $file_name
 * @param $module_name
 * @return string
 */
function _show_module_name($file_name, $module_name) {
    if(strpos($file_name, 'private_') === FALSE ) {
        $results = $module_name;
    } else {
        $results = 'private';
    }
    return $results;
}

/**
 * Make link to actions but
 * Protect Private file output
 *
 * @param $file_name
 * @param $module_name
 * @return string
 */
function _show_link($file_name, $module_name, $link_text = 'view', $link) {
    $path = drupal_get_path('module', $module_name);
    if(strpos($file_name, 'private_') !== FALSE) {
        return 'n/a';
    }
    switch($link_text) {
        case 'view':
            $results = l($link_text, 'admin/behat/view' . $link);
            return $results;
        case 'edit':
            if(empty($path)) {
                return l($link_text, 'admin/behat/edit' . $link);
            } else {
                return 'n/a';
            }
        case 'delete':
            if(empty($path) && user_access("behat delete test")) {
                return l($link_text, $link);
            } else {
                return 'n/a';
            }

    }
}

/**
 * Make dekete link to actions but
 * Protect Private file output and
 * permissions.
 *
 * @param $file_name
 * @param $module_name
 * @return string
 */
function _show_delete_link($file_name, $module_name, $link_text = 'view') {

    if(strpos($file_name, 'private_') === FALSE && user_access("behat delete test")) {
        $results = l($link_text, "behat_editor_v1/behat_editor_actions/$module_name/$file_name", array('attributes' => array('class' => array('index-delete-test'), 'data-filename' => $file_name)));
    } else {
        $results = 'not allowed';
    }
    return $results;
}



/**
 * Used in the forms
 */
function run_test_array($filename, $module, $action = 'run') {
   return  array(
        '#type' => 'link',
        '#title' => t('Run Test'),
        '#name' => 'run_test',
        '#href' => "behat_editor_v1/behat_editor_actions/feature/$action",
        '#attributes' => array('class' => array('btn', 'btn-success', 'run')),
    );
}

function add_test_array($filename, $module) {
    return array(
        '#type' => 'link',
        '#title' => t('Save New Test'),
        '#name' => 'add_test',
        '#href' => "behat_editor_v1/behat_editor_actions",
        '#attributes' => array('class' => array('btn', 'btn-info', 'add'), 'data-filename' => $filename, 'data-module' => $module),
    );
}

function admin_button_array(){
    return array(
        '#type' => 'link',
        '#title' => t('Admin'),
        '#name' => 'admin_area',
        '#href' => "admin/behat/index",
        '#attributes' => array('class' => array('btn', 'btn-warning', 'back')),
    );
}

function update_test_array($filename, $module) {
    return array(
        '#type' => 'link',
        '#title' => t('Save Test'),
        '#name' => 'save_test',
        '#href' => "behat_editor_v1/behat_editor_actions/$module/$filename",
        '#attributes' => array('class' => array('btn', 'btn-info', 'save')),
    );
}

function delete_test_array($filename, $module) {
    return array(
        '#type' => 'link',
        '#title' => t('Delete Test'),
        '#name' => 'delete_test',
        '#href' => "behat_editor_v1/behat_editor_actions/$module/$filename",
        '#attributes' => array('class' => array('btn', 'btn-danger', 'delete'), 'data-filename' => $filename),
    );
}

function edit_test_array($filename, $module) {
    if($module == 'behat_tests' && user_access("behat delete test") ) {
        return array(
            '#type' => 'link',
            '#name' => 'edit_test',
            '#title' => t('Edit Test'),
            '#href' => "admin/behat/edit/$module/$filename",
            '#attributes' => array('class' => array('btn', 'btn-info', 'edit')),
        );
    } else {
        return array();
    }

}

function clone_test_array($filename, $module) {
    //Default for no to behat_tests
    $filename_no_ext = REQUEST_TIME . '.feature';
    $module = BEHAT_EDITOR_DEFAULT_STORAGE_FOLDER;
    return array(
        '#type' => 'link',
        '#name' => 'clone_test',
        '#title' => t('Clone Test'),
        '#href' => "behat_editor_v1/behat_editor_actions",
        '#attributes' => array('class' => array('btn', 'btn-default', 'clone'), 'data-filename' => $filename_no_ext, 'data-module' => $module),
    );
}
/**
 * For my module I just wanted a more simple form of modal
 * then what I get out of ctools IMO
 * thanks to twitter bootstrap which I will
 * include as a library if needed.
 *
 * @param $title
 * @param $body
 * @param $buttons
 * @param $id
 * @return string
 */
function behat_editor_modal($title, $body, $buttons, $id = 'beModal'){
if(is_array($buttons) && count($buttons) > 0) {
    $button = array();
    foreach($buttons as $key) {
        $classes = (count($key['class'])) ? implode(' ', $key['class']) : '';
        $btitle = $key['title'];
        $data = (isset($key['data'])) ? _be_build_data($key['data']) : '';
        $button[] = "<button type='button' class=\"$classes\" $data>$btitle</button>";
    }
$buttons = implode($button);

$buttons = <<<HEREDOC
<div class="modal-footer">
    $buttons
</div>
HEREDOC;
}

$modal = <<<HEREDOC
  <div class="modal fade" id="$id" tabindex="-1" role="dialog" aria-labelledby="beModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h4 class="modal-title">$title</h4>
        </div>
        <div class="modal-body">
          $body
        </div>
        $buttons
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
HEREDOC;
    return $modal;
}

/**
 * Build out the data items in a button
 */

function _be_build_data($data) {
    $output = array();
    foreach($data as $key => $value) {
        $output[] = "data-{$key}=\"$value\"";
    }
    return implode(' ', $output);
}


/**
 * I need to build the array for the files stored in the behat_tmp folder
 *
 * @return array
 */
function _behat_editor_test_folder_array() {
    return array(
        'behat_tests' => array(
            'exists' => 1,
            'writable' => 1,
            'nice_name' => 'Behat Tmp Folder'
        )
    );
}

function behat_editor_add_bootstrap() {
    $admin_theme = variable_get('admin_theme', FALSE);
    $default_theme = variable_get('theme_default', FALSE);
    /* check if bootstrap is default theme or default admin theme */
    if( ( $admin_theme != 'bootstrap' && $default_theme != 'bootstrap') || ( $admin_theme != 0 && $default_theme != 'bootstrap') ) {
        $theme_folder = variable_get('composer_manager_vendor_dir', FALSE) . '/twitter/bootstrap/dist/';
        drupal_add_css($theme_folder . 'css/bootstrap.css', array('type' => 'module', 'preprocess' => FALSE, 'group' => CSS_SYSTEM));
        drupal_add_js('/' . $theme_folder . 'js/bootstrap.js', array('scope' => 'footer'));
    };
}

function behat_editor_results_history_modal(&$form) {
    $title = "Preview of test";
    $body = "<div class='test'></div>";
    $buttons = array(
        'close' => array('title' => 'Cancel', 'class' => array('btn', 'btn-success'), 'data' => array('dismiss' => "modal"))
    );

    $id = 'modalResults';
    $form['results_history']['#markup'] = behat_editor_modal($title, $body, $buttons, $id);
}


function behat_editor_clone_modal(&$form) {
    $title =  "Clone File";
    $body = "The file <span class='filename'>coming soon..</span> will be cloned and you will be redirected to the Edit page..";
    $body .= "<div class='form-group'>
                    <label for='clone-name' class='col-sm-3 control-label'>New Name:</label>
                    <div class='col-sm-6'>
                        <input id='clone-name' class='new-clone-name form-control' value placeholder='name_morename.feature'>
                    </div>
              </div>";
    $buttons = array(
        'save' => array('title' => "Continue", 'class' => array('btn', 'btn-danger', 'confirm-clone')),
        'delete' => array('title' => 'Cancel', 'class' => array('btn', 'btn-success'), 'data' => array('dismiss' => "modal"))
    );
    $id = 'beModalClone';
    $form['clone_test_modal']['#markup'] = behat_editor_modal($title, $body, $buttons, $id);
}

function behat_editor_results_container(&$form) {

    $form['results_area']['container2'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('panel', 'panel-default')),
    );

    $form['results_area']['container2']['past_results'] = array(
        '#prefix' => "<div class=\"panel-heading\">
                            <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#results-container\">
                                <h4 class=\"panel-title\">Past Results</h4>
                            </a>
                        </div>",
        '#markup' => '<div id="results-container" class="panel-collapse collapse">
                        <div class="panel-body">
                                <table cellpadding="0" cellspacing="0" border="0" class="display" id="past-results-table"></table>
                        </div>'
    );
}

function behat_editor_delete_modal(&$form, $filename) {
    $title =  "Confirm Delete";
    $body = "The file {$filename} will be deleted.";

    $buttons = array(
        'save' => array('title' => "Confirm", 'class' => array('btn', 'btn-danger', 'confirm-delete')),
        'delete' => array('title' => 'Cancel', 'class' => array('btn', 'btn-success'), 'data' => array('dismiss' => "modal"))
    );

    $form['message']['#markup'] = behat_editor_modal($title, $body, $buttons);
}

function behat_editor_current_test_container(&$form){
    $form['results_area'] = array(
        '#type' => 'container',
        '#attributes' => array('id' => 'accordion', 'class' => array('col-sm-6', 'panel-group'))
    );

    $form['results_area']['container1'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('panel', 'panel-default')),
    );

    $form['results_area']['container1']['results'] = array(
        '#prefix' => "<div class=\"panel-heading\">
                        <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapseOne\">
                            <h4 class=\"panel-title\">Current Test</h4>
                        </a></div>",
        '#markup' => theme('behat_editor_results_area', $args = array('params' => array())),
    );
}



function behat_editor_save_modal(&$form, $filename) {
    $title =  "Confirm Save";
    $body = "The file {$filename} will be saved and you will be redirected.";

    $buttons = array(
        'save' => array('title' => "Confirm", 'class' => array('btn', 'btn-danger', 'confirm-delete')),
        'delete' => array('title' => 'Cancel', 'class' => array('btn', 'btn-success'), 'data' => array('dismiss' => "modal"))
    );

    $form['message']['#markup'] = behat_editor_modal($title, $body, $buttons);
}

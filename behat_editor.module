<?php


//Default folder to store tests for modules
define('BEHAT_EDITOR_FOLDER', 'behat_features');
//Name of "tmp" module to help build the array of
//module with behat_features folders.
define('BEHAT_EDITOR_DEFAULT_FOLDER', 'behat_tests');
//The name of the folder that stores the non module based
//tests eg files/behat_tests
define('BEHAT_EDITOR_DEFAULT_STORAGE_FOLDER', 'behat_tests');

require_once 'behat_editor_services.resource.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function behat_editor_ctools_plugin_api() {
    list($module, $api) = func_get_args();
    if ($module == "services" && $api == "services") {
        return array("version" => "3");
    }
}


/**
 * Implements hook_permission().
 */
function behat_editor_permission() {
    $items['behat view test'] = array(
       'title' => t('View a test file'),
       'description' => t('Can view a singular test')
    );
    $items['behat view all tests'] = array(
        'title' => t('View all test file'),
        'description' => t('Can view all tests')
    );
    $items['behat add test'] = array(
        'title' => t('Add a test'),
        'description' => t('Can add a test')
    );
    $items['behat run test'] = array(
        'title' => t('Can run a test'),
        'description' => t('Can run a test')
    );
    $items['behat edit test'] = array(
        'title' => t('Can edit a test'),
        'description' => t('Can edit a test')
    );
    $items['behat delete test'] = array(
        'title' => t('Can delete a test'),
        'description' => t('Can delete a test')
    );
   return $items;
}

/**
 * Implements hook_menu().
 *
 * @todo use services for the run endpoint
 */
function behat_editor_menu() {
    $path = drupal_get_path('module', 'behat_editor');
    $items['admin/behat/index'] = array(
        'title' => 'Admin Behat Files',
        'page callback' => 'behat_editor_index',
        'access arguments' => array('behat view all tests'),
        'file' => 'behat-editor-index.inc',
        'file path' => "$path/tpl/",
        'description' => 'Behat Editor Index page',
        'type' => MENU_CALLBACK
    );

    $items['admin/behat/view/%/%'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('behat_editor_view_form', 3,4),
        'access arguments' => array('behat view test'),
        'file' => 'behat_editor_view.inc',
        'file path' => "$path/tpl/",
        'type' => MENU_CALLBACK,
    );
    $items['admin/behat/add'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('behat_editor_add_form'),
        'access arguments' => array('behat add test'),
        'file' => 'behat_editor_add_form.inc',
        'file path' => "$path/tpl/",
        'type' => MENU_CALLBACK,
    );
    $items['admin/behat/edit/%/%'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('behat_editor_edit_form', 3, 4),
        'access arguments' => array('behat edit test'),
        'file' => 'behat-editor-edit.inc',
        'file path' => "$path/tpl/",
        'type' => MENU_CALLBACK,
    );
    return $items;
}


/**
 * Implements hook_theme().
 */
function behat_editor_theme() {
    $items['behat_editor_view'] = array(
        'variables' => array(
            'params' => NULL,
        ),
        'file' => 'tpl/behat_shared_views.inc'
    );
    $items['behat_editor_file_to_html_view'] = array(
        'variables' => array(
            'file_text' => NULL,
        ),
        'file' => 'tpl/behat_shared_views.inc'
    );
    $items['behat_editor_file_to_html_edit'] = array(
        'variables' => array(
            'file_text' => NULL,
        ),
        'file' => 'tpl/behat_shared_views.inc'
    );
    $items['behat_editor_results_area'] = array(
        'variables' => array(
            'params' => NULL
        ),
        'file' => 'tpl/behat_shared_views.inc',
        'template' => 'tpl/behat-editor-results-area'
    );
    $items['behat_editor_view_questions_area'] = array(
        'variables' => array(
            'actions' => NULL,
            'questions' => NULL
        ),
        'file' => 'tpl/behat_shared_views.inc',
        'template' => 'tpl/behat-editor-view-questions-area'
    );
    $items['behat_editor_questions_area_edit'] = array(
        'variables' => array(
            'params' => NULL
        ),
        'file' => 'tpl/behat_shared_views.inc',
        'template' => 'tpl/behat-editor-questions-area-edit'
    );
    $items['behat_editor_questions_area_intro'] = array(
        'variables' => array(),
        'file' => 'tpl/behat_shared_views.inc',
        'template' => 'tpl/behat-editor-questions-area-intro'
    );
    $items['behat_editor_item_list'] = array(
        'variables' => array(
            'items' => NULL,
            'attributes' => NULL,
        ),
        'file' => 'tpl/behat_shared_views.inc',
    );
    return $items;
}


/**
 * Implements hook_library().
 *
 * Pulling in Tag-it for the nice
 * effect on the Feature tags
 *
 * Jquery DataTable for
 * admin area.
 */
function behat_editor_library() {
    $path = drupal_get_path('module', 'behat_editor');
    $libraries['tag_it'] = array(
        'title' => 'jQuery Tagp-it',
        'website' => "http://aehlke.github.io/tag-it/",
        'version' => '2.0-x',
        'js' => array(
            $path . '/libraries/tag-it/js/tag-it.js' => array(),
        ),
        'css' => array(
            $path . '/libraries/tag-it/css/jquery.tagit.css' => array(
                'type' => 'file',
                'media' => 'screen'
            ),
            $path . '/libraries/tag-it/css/tagit.ui-zendesk.css' => array(
                'type' => 'file',
                'media' => 'screen'
            )
        )
    );
    $libraries['data_table'] = array(
        'title' => 'DataTable',
        'website' => "http://datatables.net/",
        'version' => '1.9',
        'js' => array(
            $path . '/libraries/datatables/media/js/jquery.dataTables.js' => array(),
        ),
        'css' => array(
            $path . '/libraries/datatables/media/css/jquery.dataTables.css' => array(
                'type' => 'file',
                'media' => 'screen'
            )
        )
    );
    $libraries['date_format'] = array(
        'title' => 'Date Format',
        'website' => "http://jacwright.com/projects/javascript/date_format/",
        'version' => '1',
        'js' => array(
            $path . '/libraries/date/date_format.js' => array(),
        )
    );
    return $libraries;
}

/**
 * Implements hook_form_alter().
 *
 * Centralize some shared code
 */
function behat_editor_form_alter(&$form, $form_state, $form_id) {
    $forms = array('behat_editor_view_form', 'behat_editor_edit_form', 'behat_editor_add_form');
    if(in_array($form_id, $forms)) {
        $vendor = composer_manager_vendor_dir();
        if(!file_exists($vendor)) {
            drupal_set_message(t("You do not have a vendor folder setup. Did you finish setting up Composer Manager?", 'error'));
        } elseif(!file_exists($vendor .'/behat/behat/bin/behat' )) {
            drupal_set_message(t('You do not have a behat loaded yet. Did you run !composer_install via the Composer Manager?',
                array('!composer_install' => l('composer install', 'admin/system/composer-manager'))), 'error');
        }
        drupal_set_message(t('!icon Any @javascript tag will not be run. Only on SauceLabs can that tag be used.', array('!icon' => '<i class="glyphicon glyphicon-comment glyphicon-white"></i>')), 'info');
    }
}

/**
 * Get a quick path to the behat/bin exec
 * in the vendor dir
 *
 * @return string
 */
function _behat_editor_behat_bin_folder() {
    return composer_manager_vendor_dir() . '/behat/behat/';
}

/**
 * Implements hook_help().
 */
function behat_editor_help($path, $arg) {
    $output = NULL;

    switch ($path) {
        case 'admin/help#behat_editor':
            $output = '<p>' . t('Visit the <a href="@handbook_url">Behat Editor Handbook</a> for help and information.', array('@handbook_url' => 'http://comingsoon.com')) . '</p>';
            break;
        case 'admin/behat/index':
            $output = '<p>' . t('Below are all the feature files found in behat_features folders of all enabled modules') . '</p>';
            $output .= '<p>' . t('From here you can View and Run a test. Or Add a new test.') . '</p>';
            break;
        case 'admin/behat/view/%/%':
            $output = '<p>' . t('You are viewing a file. You can edit or run a test as needed') . '</p>';
            break;
        case 'admin/behat/add':
            $output = '<p>' . t('This will create a new test file. As you make it feel free to Run a test.') . '</p>';
            break;
        case 'admin/behat/edit':
            $output = '<p>' . t('You are editing a file on the system. As you Run or click Save your test will be written back to the file.') . '</p>';
            break;
    }
    return $output;
}


/**
 * Make link to file but
 * Protect Private file output
 * if file marked private_
 *
 * @param $file_name
 * @param $module_name
 * @return string
 */
function _show_file_link($file_name, $module_name) {
    if(strpos($file_name, 'private_') === FALSE ) {
        $results = l($file_name, 'admin/behat/view/' . $module_name . '/' . $file_name);
    } else {
        $results = $file_name;
    }
    return $results;
}


/**
 * Protect module name if
 * Private
 *
 * @param $file_name
 * @param $module_name
 * @return string
 */
function _show_module_name($file_name, $module_name) {
    if(strpos($file_name, 'private_') === FALSE ) {
        $results = $module_name;
    } else {
        $results = 'private';
    }
    return $results;
}

/**
 * Make link to actions but
 * Protect Private file output
 *
 * @param $file_name
 * @param $module_name
 * @return string
 */
function _show_link($file_name, $module_name, $link_text = 'view') {
    if(strpos($file_name, 'private_') === FALSE ) {
        $results = l($link_text, 'admin/behat/'.$link_text.'/' . $module_name . '/' . $file_name);
    } else {
        $results = 'not allowed';
    }
    return $results;
}

/**
 * Make dekete link to actions but
 * Protect Private file output and
 * permissions.
 *
 * @param $file_name
 * @param $module_name
 * @return string
 */
function _show_delete_link($file_name, $module_name, $link_text = 'view') {

    if(strpos($file_name, 'private_') === FALSE && user_access("behat delete test")) {
        $results = l($link_text, "behat_editor_v1/behat_editor_actions/$module_name/$file_name", array('attributes' => array('class' => array('index-delete-test'), 'data-filename' => $file_name)));
    } else {
        $results = 'not allowed';
    }
    return $results;
}



/**
 * Used in the forms
 */
function run_test_array($filename, $module, $action = 'run') {
   return  array(
        '#type' => 'link',
        '#title' => t('Run Test'),
        '#name' => 'run_test',
        '#href' => "behat_editor_v1/behat_editor_actions/feature/$action/$module/$filename",
        '#attributes' => array('class' => array('btn', 'btn-success', 'run')),
    );
}

function add_test_array($filename, $module) {
    return array(
        '#type' => 'link',
        '#title' => t('Save New Test'),
        '#name' => 'add_test',
        '#href' => "behat_editor_v1/behat_editor_actions",
        '#attributes' => array('class' => array('btn', 'btn-info', 'add'), 'data-filename' => $filename, 'data-module' => $module),
    );
}

function admin_button_array(){
    return array(
        '#type' => 'link',
        '#title' => t('Admin'),
        '#name' => 'admin_area',
        '#href' => "admin/behat/index",
        '#attributes' => array('class' => array('btn', 'btn-warning', 'back')),
    );
}

function update_test_array($filename, $module) {
    return array(
        '#type' => 'link',
        '#title' => t('Save Test'),
        '#name' => 'save_test',
        '#href' => "behat_editor_v1/behat_editor_actions/$module/$filename",
        '#attributes' => array('class' => array('btn', 'btn-info', 'save')),
    );
}

function delete_test_array($filename, $module) {
    return array(
        '#type' => 'link',
        '#title' => t('Delete Test'),
        '#name' => 'delete_test',
        '#href' => "behat_editor_v1/behat_editor_actions/$module/$filename",
        '#attributes' => array('class' => array('btn', 'btn-danger', 'delete'), 'data-filename' => $filename),
    );
}

function edit_test_array($filename, $module) {
    return array(
        '#type' => 'link',
        '#name' => 'edit_test',
        '#title' => t('Edit Test'),
        '#href' => "admin/behat/edit/$module/$filename",
        '#attributes' => array('class' => array('btn', 'btn-info', 'edit')),
    );
}

/**
 * For my module I just wanted a more simple form of modal
 * then what I get out of ctools IMO
 * thanks to twitter bootstrap which I will
 * include as a library if needed.
 *
 * @param $title
 * @param $body
 * @param $buttons
 * @return string
 */
function behat_editor_modal($title, $body, $buttons){
if(count($buttons)) {
    $button = array();
    foreach($buttons as $key) {
        $classes = (count($key['class'])) ? implode(' ', $key['class']) : '';
        $btitle = $key['title'];
        $data = (isset($key['data'])) ? _be_build_data($key['data']) : '';
        $button[] = "<button type='button' class=\"$classes\" $data>$btitle</button>";
    }
$buttons = implode($button);

$buttons = <<<HEREDOC
<div class="modal-footer">
    $buttons
</div>
HEREDOC;
}

$modal = <<<HEREDOC
  <div class="modal fade" id="beModal" tabindex="-1" role="dialog" aria-labelledby="beModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h4 class="modal-title">$title</h4>
        </div>
        <div class="modal-body">
          $body
        </div>
        $buttons
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
HEREDOC;
    return $modal;
}

/**
 * Build out the data items in a button
 */

function _be_build_data($data) {
    $output = array();
    foreach($data as $key => $value) {
        $output[] = "data-{$key}=\"$value\"";
    }
    return implode(' ', $output);
}


/**
 * I need to build the array for the files stored in the behat_tmp folder
 *
 * @return array
 */
function _behat_editor_test_folder_array() {
    return array(
        'behat_tests' => array(
            'exists' => 1,
            'writable' => 1,
            'nice_name' => 'Behat Tmp Folder'
        )
    );
}

function behat_editor_add_bootstrap() {
    $admin_theme = variable_get('admin_theme', FALSE);
    $default_theme = variable_get('theme_default', FALSE);
    /* check if bootstrap is default theme or default admin theme */
    if( ( $admin_theme != 'bootstrap' && $default_theme != 'bootstrap') || ( $admin_theme != 0 && $default_theme != 'bootstrap') ) {
        $theme_folder = variable_get('composer_manager_vendor_dir', FALSE) . '/twitter/bootstrap/dist/';
        drupal_add_css($theme_folder . 'css/bootstrap.css', array('type' => 'module', 'preprocess' => FALSE, 'group' => CSS_SYSTEM));
        drupal_add_js('/' . $theme_folder . 'js/bootstrap.js', array('scope' => 'footer'));
    };
}